#ifndef MODEL_M_H
#define MODEL_M_H
#include "stdafx.h"
#include "DataType.h"
#include "GeneralException.h"
#include <string.h>
#include <stdio.h>
#include <vector>

//! ClassInfo struct

/*! This structure stores class range information.
	It is used by ModelMaker to construct an Imagine 
	spatial modeler script.
*/
typedef struct {
	
	//! The low pixel value.
	double low;

	//! The high pixel value.
	double high;

	//! The value to assign to this range of pixel values.
	int outputPixelVal;
} ClassInfo;

//! ModelMaker object for generating an Imagine spatial modeler script.

/*! The ModelMaker is used to load classification information from a
	CLA file generated by an ImageClassifier object, and use 
	that data to create an Imagine spatial modeler script.  
	This script will take, as input, the original Imagine file 
	that the image data came from, the desired Imagine output file,
	and the pixel ranges for each class; and will output a script 
	that automatically assigns sequential integer pixel values
	to each of the classes in the new image.  Multilayered images
	are supported, provided all classification information for each
	layer was generated by an ImageClassifier object and is stored in the
	CLA file.

	Note: The CLA files used to generate the script, are actually just XML
		  files.  The TinyXml library is used to create and parse these files.
*/
class ModelMaker {
public:

	//! Constructor
	
	/*! This constructor instantiates a ModelMaker object with all the required
		information for generating the spatial modeler script.
		\param inFile The original Imagine image file.
		\param outFile The desired Imagine output file.
		\param claFile The CLA file that contains the pixel ranges for each class in each layer of the original image.
		\throw GeneralException 
	*/
	ModelMaker(const char* inFile, const char* outFile, const char* claFile);

	//! Destructor
	~ModelMaker();
	
	//! Generate the spatial modeler script.

	/*! This function takes all information loaded from the CLA file
		and generates a working spatial modeler script.
		\param filename The desired output file name for the generated script. 
		\throw GeneralException
	*/
	void generate(const char* filename);
private:
	//! Original imagine input file.
    char* m_inFile; 

	//! Desired imagine output file.
	char* m_outFile;

	//! Number of layers in the image.
	unsigned int m_numLayers; 

	//! 2D vector of pixel range values for every class in every layer.
	std::vector< std::vector<ClassInfo> > m_classInfo; 

	//! The data type of the pixels in the image.
	DataType m_type;

	//! Replaces '\' with '/'

	/*! This purpose of this function is that, when using Windows, 
		file paths use backward slashes, whereas Imagine spatial modeler
		scripts use forward slashes; this function corrects file path 
		errors by replacing the backward slashes with forward slashes.
		\param[out] filename The file path to be modified.
		\throw GeneralException 
	*/
	void swapSlashes(char* filename);

	//! Parse the CLA file.

	/*! This function takes as input, the path to the CLA file
		that contains the pixel ranges for each class and initializes
		all appropriate class members accordingly.
		\param claFile The path to the CLA file to parse.
		\throw GeneralException 
	*/
	void buildClassInfo(const char* claFile); //parse .cla XML file
};

#endif 

